path=(/usr/local/go/bin $path[@])
path=($HOME/bin $path[@])
{{ if and (eq .chezmoi.os "darwin") (eq .chezmoi.arch "arm64") }}
# Homebrew path for Apple Silicon
path=(/opt/homebrew/bin $path[@])
path=(/opt/homebrew/opt/unzip/bin $path[@])
path=($HOME/.local/share/mise/shims $path[@])
# To make sure that we can run pgcli.
path=(/opt/homebrew/opt/libpq/bin $path[@])

# https://github.com/zellij-org/zellij/issues/3036#issuecomment-2024214955
path=(/opt/homebrew/opt/curl/bin $path[@])
{{ end }}
path=(/usr/sbin $path[@])
path=(/usr/local/bin $path[@])
path=(/usr/local/go/bin $path[@])
path=($HOME/go/bin $path[@])
path=($HOME/bin $path[@])
path=($HOME/bin/lua/bin $path[@])
path=($HOME/.poetry/bin $path[@])
path=($HOME/.local/bin $path[@])
{{- if eq .chezmoi.os "darwin" }}
path=($(brew --prefix gnu-sed)/libexec/gnubin $path[@])
path=($(brew --prefix gnu-tar)/libexec/gnubin $path[@])
path=($(brew --prefix coreutils)/libexec/gnubin $path[@])
path=($(brew --prefix libpq)/bin $path[@])
{{- else if or (eq .chezmoi.osRelease.name "Ubuntu") (eq .chezmoi.osRelease.name "elementary OS") }}
{{- end }}
path=($HOME/.local/share/nvim/mason/bin $path[@])
path=($HOME/dotfiles/go/bin $path[@])
{{- if eq .chezmoi.os "darwin" }}
path=(/Library/TeX/texbin $path[@])
{{- else if or (eq .chezmoi.osRelease.name "Ubuntu") (eq .chezmoi.osRelease.name "elementary OS") }}
path=(/usr/local/texlive/2022/bin/x86_64-linux $path[@])
{{- end }}

# Added by pnpm.
export PNPM_HOME="/Users/shihanng/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# Added by Google Cloud SDK.
if [ -f '$HOME/bin/gcp/google-cloud-sdk/path.zsh.inc' ]; then . '$HOME/bin/gcp/google-cloud-sdk/path.zsh.inc'; fi

manpath=(/usr/local/texlive/2022/texmf-dist/doc/man $manpath[@])
infopath=(/usr/local/texlive/2022/texmf-dist/doc/info $infopath[@])

export CLICOLOR=1
export DELTA_PAGER='less -S'
export EDITOR="nvim"
export FORGIT_LOG_FZF_OPTS="--reverse"
export FORGIT_REBASE_FZF_OPTS="--reverse"
export GPG_TTY=$(tty)
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LESS='-XRMsIg'
export NAVI_CONFIG="${HOME}/.config/navi/config.yaml"
export PAGER="less"
export RIPGREP_CONFIG_PATH="${HOME}/.ripgreprc"
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
export TERM="xterm-256color"
export VISUAL="nvim"
export XDG_CONFIG_HOME="$HOME/.config"
export BATDIFF_USE_DELTA=true

alias assume="source assume"
alias ls="eza"
alias lz="lazygit"
alias open='open_command'
alias vi="nvim"
alias vim="nvim"
alias vimdiff="nvim -d"
alias man="batman"

# Start configuration added by Zim install
#
# User configuration sourced by interactive shells
#

# -----------------
# Zsh configuration
# -----------------

#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -v

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}

# -----------------
# Zim configuration
# -----------------

# Use degit instead of git as the default tool to install and update modules.
#zstyle ':zim:zmodule' use 'degit'

# --------------------
# Module configuration
# --------------------

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
#zstyle ':zim:git' aliases-prefix 'g'

#
# input
#

# Append `../` to your input for each `.` you type after an initial `..`
#zstyle ':zim:input' double-dot-expand yes

#
# termtitle
#

# Set a custom terminal title format using prompt expansion escape sequences.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# If none is provided, the default '%n@%m: %~' is used.
#zstyle ':zim:termtitle' format '%1~'

#
# zsh-autosuggestions
#

# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
#ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
#typeset -A ZSH_HIGHLIGHT_STYLES
#ZSH_HIGHLIGHT_STYLES[comment]='fg=242'

# ------------------
# Initialize modules
# ------------------

ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim
# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
# Initialize modules.
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

#
# zsh-history-substring-search
#

zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key
# End configuration added by Zim install

gpgconf --launch gpg-agent

source "${HOME}/.p10k.zsh"
eval "$(zoxide init --cmd cd zsh)"
eval "$(navi widget zsh)"

# Yazi's shell wrapper, see: https://yazi-rs.github.io/docs/quick-start
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# We must put atuin inside this function because jeffreytse/zsh-vi-mode
# overrite the ctrl-r binding.
# See: https://github.com/jeffreytse/zsh-vi-mode?tab=readme-ov-file#execute-extra-commands
function zvm_after_init() {
  eval "$(atuin init zsh)"
}
